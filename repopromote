#!/usr/bin/python
from datetime import datetime, timedelta
import re
import subprocess
import time

# Name of testing branch
testing_name='testing'

# Name of production branch
production_name='production'

# Threshold of days between moving testing to production
days_between_promotion=4

# Find threshold date based on days between promotion
threshold_date = datetime.today() - timedelta(days=days_between_promotion)

def main():

    # Get list of updates to consider promoting
    cmd="/usr/local/reposado/repoutil --diff=" + testing_name + " " + production_name
    difftest = subprocess.check_output(cmd, shell=True).splitlines()

    # Initialize counter at second line to avoid Unique to 'testing':
    i=1

    # Loop through lines of output
    while i < len(difftest):
        # Define the line
        line=difftest[i]
        # Process until we get to a blank line or Unique to 'production'
        if "Unique to" not in line and line != '':
            # The output is generally fixed-width output, but if the description is too long, the date and branch get pushed out, so we can't rely strictly on fixed width. So we're going to regex it
            #match=re.search(r'.*?\[\'(?P<branch>.*?)\'\]', line)
            match=re.search(r'(?P<product>.*?)\s.*?\s(?P<date>\d\d\d\d-\d\d-\d\d)\s\[.*?', line)
            # Define the date based on YYYY-MM-DD string
            line_date=datetime(*time.strptime(match.group('date'), "%Y-%m-%d")[0:6])
            # Define the product ID
            product_id=match.group('product')
            # If the date of the product is less than the threshold date...
            if line_date < threshold_date:
                # Add it to the production branch
                print "Adding %s to %s because %s is before %s" % (product_id, production_name, line_date, threshold_date)
                cmd="/usr/local/reposado/repoutil --add-product " + product_id + " " + production_name
                subprocess.call(cmd, shell=True)
            else:
                print "Keeping %s in %s because %s is still after %s" % (product_id, testing_name, line_date, threshold_date)
        # If we've gotten to a blank line, end the while loop
        else:
            break
        # Increase counter for while loop
        i += 1

if __name__ == '__main__':
    main()
